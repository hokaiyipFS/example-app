# Node.js React Web App to Linux on Azure
# Build a Node.js React app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'e8df3a2e-41bc-4133-b152-6e5666f3a4bc'

  # Web app name
  webAppName: 'Lavarel-Example-App'

  # Environment name
  environmentName: 'Lavarel-Example-App'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
  - stage: Build
    displayName: Build stage
    variables:
      phpVersion: '8.0.13'
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -version
            workingDirectory: $(rootFolder)
            displayName: 'Use PHP version $(phpVersion)'

          - script: composer validate --no-check-publish && composer install --prefer-dist --no-progress
            workingDirectory: $(rootFolder)
            displayName: 'Composer install'

          - script: |
              php artisan make:migration posts
            workingDirectory: $(rootFolder)
            displayName: 'Run Laravel migrations'

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(rootFolder)'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: 'Upload package'
            artifact: drop

  - stage: Deploy
    displayName: 'Deploy Web App'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeploymentJob
        pool:
          vmImage: $(vmImageName)
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure Web App : $(webAppName)'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: $(webAppName)
                    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
                    appType: webAppLinux
                    RuntimeStack: 'NODE|10.10'
                    StartupCommand: 'npm run start'
                    ScriptType: 'Inline Script'
                    InlineScript: |
                      npm install
                      npm run build --if-present
